; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ‚ô•Ô∏è

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: (cd /Users/yasuki.okuyama/pra/clj-pra; lein update-in :dependencies conj '[nrepl,"1.3.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.55.4"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless)
; Using host:port 127.0.0.1:63099 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
cljÍûâclojure-app.coreÍûâ>¬†
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
cljÍûâclojure-app.coreÍûâ>¬†
; Jack-in done.
cljÍûâclojure-app.coreÍûâ>¬†
#'clojure-app.core/codepoint-count
cljÍûâclojure-app.coreÍûâ>¬†
5
cljÍûâclojure-app.coreÍûâ>¬†
1
cljÍûâclojure-app.coreÍûâ>¬†
#'clojure-app.core/char-count
cljÍûâclojure-app.coreÍûâ>¬†
5
cljÍûâclojure-app.coreÍûâ>¬†
2
cljÍûâclojure-app.coreÍûâ>¬†
10
cljÍûâclojure-app.coreÍûâ>¬†
5
cljÍûâclojure-app.coreÍûâ>¬†
10
cljÍûâclojure-app.coreÍûâ>¬†
5
cljÍûâclojure-app.coreÍûâ>¬†
10
cljÍûâclojure-app.coreÍûâ>¬†
; ÈÄöÂ∏∏„ÅÆÊñáÂ≠óÂàó: Hello
; „Ç≥„Éº„Éâ„Éù„Ç§„É≥„ÉàÊï∞: 5
; charÊï∞: 5
; 
; Êó•Êú¨Ë™ûÊñáÂ≠óÂàó: „Åì„Çì„Å´„Å°„ÅØ
; „Ç≥„Éº„Éâ„Éù„Ç§„É≥„ÉàÊï∞: 5
; charÊï∞: 5
; 
; ÁµµÊñáÂ≠ó„ÇíÂê´„ÇÄÊñáÂ≠óÂàó: HelloüòÄ
; „Ç≥„Éº„Éâ„Éù„Ç§„É≥„ÉàÊï∞: 6
; charÊï∞: 7
; 
; Ë§áÈõë„Å™ÁµµÊñáÂ≠ó: üë®‚Äçüë©‚Äçüëß‚Äçüë¶
; „Ç≥„Éº„Éâ„Éù„Ç§„É≥„ÉàÊï∞: 7
; charÊï∞: 11
nil
cljÍûâclojure-app.coreÍûâ>¬†
; Syntax error compiling at (src/clojure_app/core.clj:42:7).
; Unable to resolve symbol: length-equals? in this context
; 
; Execution error (IllegalStateException) at clojure-app.core/eval10252 (REPL:47).
; Attempting to call unbound fn: #'clojure-app.core/validate-input
; 
; Execution error (IllegalStateException) at clojure-app.core/eval10254 (REPL:48).
; Attempting to call unbound fn: #'clojure-app.core/validate-input
; 
; Execution error (IllegalStateException) at clojure-app.core/eval10256 (REPL:49).
; Attempting to call unbound fn: #'clojure-app.core/validate-input
cljÍûâclojure-app.coreÍûâ>¬†
; Syntax error compiling at (src/clojure_app/core.clj:42:7).
; Unable to resolve symbol: length-equals? in this context
cljÍûâclojure-app.coreÍûâ>¬†
#'clojure-app.core/length-equals?
cljÍûâclojure-app.coreÍûâ>¬†
#'clojure-app.core/validate-input
cljÍûâclojure-app.coreÍûâ>¬†
; ‚úì ÂÖ•Âäõ„ÄåHello„Äç„ÅØ5ÊñáÂ≠ó„Åß„Åô
; ‚úì ÂÖ•Âäõ„ÄåHelloüòÄ„Äç„ÅØ6ÊñáÂ≠ó„Åß„Åô
; ‚úó ÂÖ•Âäõ„ÄåHelloüòÄ„Äç„ÅØ7ÊñáÂ≠ó„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„ÇìÔºàÂÆüÈöõ„ÅØ6ÊñáÂ≠óÔºâ
nil
cljÍûâclojure-app.coreÍûâ>¬†
; ‚úì ÊäïÁ®øÂèØËÉΩ„Åß„ÅôÔºà9/280ÊñáÂ≠óÔºâ
; ‚úì ÊäïÁ®øÂèØËÉΩ„Åß„ÅôÔºà14/280ÊñáÂ≠óÔºâ
; ‚úó ÊñáÂ≠óÊï∞Âà∂Èôê„ÇíË∂Ö„Åà„Å¶„ÅÑ„Åæ„ÅôÔºà290/280ÊñáÂ≠óÔºâ
nil
cljÍûâclojure-app.coreÍûâ>¬†
#'clojure-app.core-test/a-test
cljÍûâclojure-app.core-testÍûâ>¬†
; Running tests for the following namespaces:
;   clojure-app.core-test
;   clojure-app.core

; FAIL in clojure-app.core-test/a-test (NO_SOURCE_FILE:7):
; FIXME, I fail.
; expected:
(= 0 1)

; actual:
(not (= 0 1))

; 1 tests finished, problems found. üò≠ errors: 0, failures: 1, ns: 1, vars: 1
cljÍûâclojure-app.core-testÍûâ>¬†
#'clojure-app.core-test/test-string-lengths
cljÍûâclojure-app.core-testÍûâ>¬†
#'clojure-app.core-test/basic-string-test
cljÍûâclojure-app.core-testÍûâ>¬†
; Running tests for the following namespaces:
;   clojure-app.core-test
;   clojure-app.core

; FAIL in clojure-app.core-test/a-test (NO_SOURCE_FILE:7):
; FIXME, I fail.
; expected:
(= 0 1)

; actual:
(not (= 0 1))

; ERROR in clojure-app.core-test/basic-string-test (Reflector.java:14):
; Ëã±Ë™û„ÅÆÂü∫Êú¨ÊñáÂ≠óÂàó: „Ç≥„Éº„Éâ„Éù„Ç§„É≥„ÉàÊï∞„ÅåÊúüÂæÖÂÄ§„Å®Áï∞„Å™„Çä„Åæ„Åô: Hello
; error: java.lang.IllegalArgumentException: No matching field found: length for class clojure.core$test (Reflector.java:14)
; expected:
(= expected-codepoints (codepoint-count test))

; 3 tests finished, problems found. üò≠ errors: 1, failures: 1, ns: 1, vars: 2
cljÍûâclojure-app.core-testÍûâ>¬†
#'clojure-app.core-test/test-string-lengths
cljÍûâclojure-app.core-testÍûâ>¬†
; Running test: basic-string-test‚Ä¶
; 2 tests finished, all passing üëç, ns: 1, vars: 1
cljÍûâclojure-app.core-testÍûâ>¬†
